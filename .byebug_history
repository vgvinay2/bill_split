continue
c
n
continue
event_params
params
continue
@event.save!
@event = Event.new(event_params)
params.require(:event).permit(:event_name, :location, :user_id,payments_attributes: [:user_name,:paid])
params.require(:event).permit(:event_name, :location, :user_id,payments_attributes: [:user_name])
params.require(:event).permit(:event_name, :location, :user_id,payments_attributes: [])
params.require(:event).permit(:event_name, :location, :user_id,payments_attributes: [:user_name,:paid])
 params[:event][:payments_attributes]
 params[:event]
 params
continue
link_to_function(name, "add_fields(this, \"#{association}\", \"#{escape_javascript(fields)}\")")
fields = f.fields_for(association, new_object, :child_index => "new_#{association}") do |builder| p render(association.to_s.singularize + "_fields", :f => builder) end  
new_object = f.object.class.reflect_on_association(association).klass.new
association
f.object
name
fields = f.fields_for(association, new_object, :child_index => "new_#{association}") do |u| p (association.to_s.singularize + "_fields", :f => u) end 
fields = f.fields_for(association, new_object, :child_index => "new_#{association}") do |u| p (association.to_s.singularize + "_fields", :f => builder) end 
 new_object = f.object.class.reflect_on_association(association).klass.new
fields = f.fields_for(association, new_object, :child_index => "new_#{association}") do |u| p u end 
fields = f.fields_for(association, new_object, :child_index => "new_#{association}")
 new_object = f.object.class.reflect_on_association(association).klass.new
association
f.object
f
name
  c
 aaa= @event.payments
@event.payments
@event
    3.times { @event.payments.build }
@event = Event.new
aaa
aaa=3.times { @event.payments.build }
@event.payments.build
@event.payments
@event
n
f.fields_for :payments {:io}
f.fields_forn
f.fields_for :payments
f.f.fields_for :payments
f.object
f
